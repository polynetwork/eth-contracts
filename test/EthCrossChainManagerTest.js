const { expectRevert, expectEvent, constants, BN } = require('@openzeppelin/test-helpers');
const { expect } = require('chai');
const EthCrossChainManager = artifacts.require('./../../contracts/core/.0/CrossChainManager/logic/EthCrossChainManager');
const EthCrossChainData = artifacts.require('./../../contracts/core/.0/CrossChainManager/data/EthCrossChainData');
const EthCrossChainManagerProxy = artifacts.require('./../../contracts/core/.0/CrossChainManager/upgrade/EthCrossChainManagerProxy');
const NewEthCrossChainManager = artifacts.require('./../../contracts/core/.0/CrossChainManager/logic/NewEthCrossChainManager');
contract('EthCrossChain', (accounts) => {

    before(async function () {
        this.ECCD = await EthCrossChainData.new({ from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 10000000, gasPrice: 50 });
        console.log("this.ECCD.address = ", this.ECCD.address);
        this.ECCM = await EthCrossChainManager.new(this.ECCD.address, 2, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 200000000, gasPrice: 50 });
        console.log("this.ECCM.address........... = ", this.ECCM.address);
        this.ECCMP = await EthCrossChainManagerProxy.new(this.ECCM.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 60000000, gasPrice: 50 });
        console.log("this.ECCMP.address........... = ", this.ECCMP.address);
        this.ECCM1 = await NewEthCrossChainManager.new(this.ECCD.address, { from: accounts[0], value: web3.utils.toWei('0', 'ether'), gas: 200000000, gasPrice: 50 });
        console.log("this.ECCM1.address........... = ", this.ECCM1.address);
    });

    describe('transferOwnership', function () {
        it('this.ECCD.transferOwnership(this.ECCM.address) correctly', async function () {
            let owner = await this.ECCD.owner.call();
            assert.equal(owner, accounts[0]);

            const {logs} = await this.ECCD.transferOwnership(this.ECCM.address);
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCM.address,
            });
            owner = await this.ECCD.owner.call();
            assert.equal(owner, this.ECCM.address);
        });
        it('this.ECCM.transferOwnership(this.ECCMP.address) correctly', async function () {
            let owner = await this.ECCM.owner.call();
            assert.equal(owner, accounts[0]);
            const {logs} = await this.ECCM.transferOwnership(this.ECCMP.address, { from: accounts[0] });
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCMP.address,
            });
            owner = await this.ECCM.owner.call();
            assert.equal(owner, this.ECCMP.address);
        });
        it('this.ECCMP.getEthCrossChainManager() correctly', async function () {
            let eccm = await this.ECCMP.getEthCrossChainManager();
            assert.equal(eccm, this.ECCM.address);
        });

    });

    describe('initGenesisBlock', function () {

        const genesisHeader = '0x000000009b9156170000000000000000000000000000000000000000000000000000000000000000000000006de0a8f7ee3fb67d8e04ac9547f3615e59adc6e0a2309c90080a272dc1fa1fd90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d2c7b22696e646578223a352c226964223a2231323035303234363864643138393965643264316363326238323938383261313635613065636236613734356166306337326562323938326436366234333131623465663733227d2c7b22696e646578223a362c226964223a2231323035303265623162616162363032633538393932383235363163646161613761616262636464306363666362633365373937393361633234616366393037373866333561227d2c7b22696e646578223a372c226964223a2231323035303331653037373966356335636362323631323335326665346132303066393964336537373538653730626135336636303763353966663232613330663637386666227d5d2c22706f735f7461626c65223a5b362c342c332c352c362c312c322c352c342c372c342c322c332c332c372c362c352c342c362c352c312c342c332c312c322c352c322c322c362c312c342c352c342c372c322c332c342c312c352c372c342c312c322c322c352c362c342c342c322c372c332c362c362c352c312c372c332c312c362c312c332c332c322c342c342c312c352c362c352c312c322c362c372c352c362c332c342c372c372c332c322c372c312c352c362c352c322c332c362c322c362c312c372c372c372c312c372c342c332c332c332c322c312c372c355d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d9fe171f3fe643eb1c188400b828ba184816fc9ac0000'
        const genesisPubKey = '0x1205041e0779f5c5ccb2612352fe4a200f99d3e7758e70ba53f607c59ff22a30f678ff757519efff911efc7ed326890a2752b9456cc0054f9b63215f1d616e574d6197120504468dd1899ed2d1cc2b829882a165a0ecb6a745af0c72eb2982d66b4311b4ef73cff28a6492b076445337d8037c6c7be4d3ec9c4dbe8d7dc65d458181de7b5250120504482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f39ef0a95ee60ad9213eb0be343b703dd32b12db32f098350cf3f4fc3bad6db23ce120504679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de8515988754f348293c65055f0f1a9a5e895e4e7269739e243a661fff801941352c387121205048172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d658df044eb93bbe698eff62156fc14d6d07b7aebfbc1a98ec4180b4346e67cc3fb01205048b8af6210ecfdcbcab22552ef8d8cf41c6f86f9cf9ab53d865741cfdb833f06b72fcc7e7d8b9e738b565edf42d8769fd161178432eadb2e446dd0a8785ba088f120504eb1baab602c5899282561cdaaa7aabbcdd0ccfcbc3e79793ac24acf90778f35a059fca7f73aeb60666178db8f704b58452b7a0b86219402c0770fcb52ac9828c'
        const genesisHeaderWithWrongBookKeeper = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c033644e70a2b4f8de4a15c4a0cd79315673b8346d033804807058f3ff4252900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303364313031383338383037656334303739613436666539386436626439613036393061626362643863653136653066626334353230633763376566373838356462227d2c7b22696e646578223a322c226964223a2231323035303361366231623065316336393737663434663336323332613566336236316236613835396234636535313437633439616363666139613432663438336631323034227d2c7b22696e646578223a332c226964223a2231323035303266663764666337303562623561633638643265383932333063363632393939616562313832383431333165396663653934656639666166356239393137353364227d2c7b22696e646578223a342c226964223a2231323035303334343031376363636138323064393066306562623436316466343633333762303932336230616532626365353833636565316132363234633932303865323038227d2c7b22696e646578223a352c226964223a2231323035303331326631303233393531333134336330323938346263346561396438353438383366636466343937333264633732376466613734373438326663383037653634227d2c7b22696e646578223a362c226964223a2231323035303333336334343833376464623934616435666130656234363062306634393135346639303530333631396434643263386565303833333066623831353834316432227d2c7b22696e646578223a372c226964223a2231323035303363366536383165353135346566626136346337356230616131636135343438396261653736353330373764313664646439373236663336356265333036323264227d5d2c22706f735f7461626c65223a5b362c352c342c332c372c322c372c372c352c352c322c322c322c322c362c352c322c342c312c332c342c312c342c332c332c322c342c352c372c312c342c332c342c352c332c352c352c342c322c312c342c332c312c352c352c352c322c362c342c332c312c362c322c322c312c332c332c322c332c372c372c362c342c342c362c372c372c362c322c362c372c372c312c332c342c312c352c362c322c372c342c342c362c352c312c332c352c372c352c332c312c362c312c322c362c362c312c372c362c362c372c332c372c312c315d2c226d61785f626c6f636b5f6368616e67655f76696577223a31303030307d7da969bae1168780e35a40c4d1af2dede531fd6fb8";
        it('initGenesisBlock revert since wrong bookkeeper', async function () {
            let pauseStatus = await this.ECCMP.paused();
            assert.equal(pauseStatus, false);
            await expectRevert(this.ECCM.initGenesisBlock(genesisHeaderWithWrongBookKeeper, genesisPubKey), "NextBookers illegal");
        });
        it('initGenesisBlock correctly', async function () {
            let pauseStatus = await this.ECCMP.paused();
            assert.equal(pauseStatus, false);
            const expectedCurEpochStartHeight = new web3.utils.BN('0');

            const { logs } = await this.ECCM.initGenesisBlock(genesisHeader, genesisPubKey);
            expectEvent.inLogs(logs, 'InitGenesisBlockEvent', {
                height: expectedCurEpochStartHeight,
                rawHeader: genesisHeader,
            });

            let storedCEPKB = await this.ECCD.getCurEpochConPubKeyBytes();
            console.log('stored Consensu Peers public key book keeper is: ', storedCEPKB);

            let curEpochStartHeight = await this.ECCD.getCurEpochStartHeight();
            expect(curEpochStartHeight).to.be.bignumber.equal(expectedCurEpochStartHeight);

        });

        it('InitGenesisBlock throws error on InitGenesisBlock twice', async function () {
            await expectRevert(this.ECCM.initGenesisBlock(genesisHeader, genesisPubKey), "EthCrossChainData contract has already been initialized!");
        });

    });

    describe('verifyHeaderAndExecuteTx', function () {
        const proofx = '0xd72000ca93f8738111a063d8ab7221f47c70a4cade0ca4a2829df494cd4b5e231bd60300000000000000204caa77a3d2ddfaa318c550f1f38dd09d610dcff827d1f2ccd4ddcafaa6c553cc081b0000000000000014b7041bc96b15da728fdfc1c47cbfc687b845adeb0200000000000000144ddcf539d13e92d4151b7f5e607d4a09f725c47d06756e6c6f636b4a14406d31a9291bdaed4f4bc31b97dc468f88256ded14344cfc3b8635f72f14200aaf2168d9f75df86fd353000000000000000000000000000000000000000000000000000000000000000177d99c0f0857535155071d49ded129993a5b98575761985e90e2d26c7a569a0d';
        const blockHeaderx1 = '0x000000009b91561700000000622b986e745766256e1b3bb6b478d3da265614dc3a481a1ece3c02a499cbec5c00000000000000000000000000000000000000000000000000000000000000008d8021b0dffcf4361f82ac31b6f990da35f304c1d11342b59b80bd836a8af94d9b970da4cb85cb93e406ce857353c33223b7558aad3f5c903bbd838fce0650314417185f9e43000082ad40a6f1e63ecffd0c017b226c6561646572223a322c227672665f76616c7565223a22424a4f784a3942326b4e446c48736a533359424150386b34414d4e446a716e7a4b32624c5839485576576272497a6d502f48425874783541654e626242436b48306c5734746f4a697455783947304d2b6d3350394677413d222c227672665f70726f6f66223a2258514a30514145775474586c5675594d68454f2f766e566f75776b394442416f4b686962506d3042706e6d3854436e7034334d73767455323868436f6c6c6c5075685573764b34647a7935416e34577730576d4639673d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofx = '0x'
        const curRawHeader = '0x'
        const signaturesx1 = '0x63fd63a8448a034a594c7e34034c0455628c3e879e6981e879b6f20ad1994f3e349d5021592a10908074d5ffc3d72384ee7dbfa7ad4b41388944c22dd3276bc701b046097a68620061598e5c59367f1faab18548ece6c8d6aca1572f95eee3915623eeba8a9c06a1886a16bd019f0d294fc1b204f273a32f4fcfcec994368827f00187206061136d01eb706c1950926d2986d20c3cc879977ccecbae6f8771dfc8873e9c269122575c7493a424f8cce1144e33115ed2402af40f141caf53fef4869500dc9caa49811f4d63c22752906cbfc03bf0bc646699cd82d143c349ab871bf6580102c40a38f4b9284865534dfb2059c100ae383e7f50c35f35eb7a768d4160890146487eb3f2ade194b48fb85df5c22e9a554d551375f23568e2f19f7d0b7021cf241b72890e4b12889480316e4a96404b36b9ef25d6337d947f8a9968577af554011c58c13bc05bff169897898d9c044e93006c8181e6231c1d7ab92b5bc45dd0242a65018cc843404e1e20f6748df88c48ba9a383a51c6493b0358153f0e2d78ca01'
        const blockHeightx1 = new web3.utils.BN('16734');
        it('verifyHeaderAndExecuteTx correctly', async function () {
            const {receipt, logs} = await this.ECCM.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('3'),
                toContract: '0x4ddcf539d13e92d4151b7f5e607d4a09f725c47d',
                crossChainTxHash:'0x00ca93f8738111a063d8ab7221f47c70a4cade0ca4a2829df494cd4b5e231bd6',
                fromChainTxHash:'0x4caa77a3d2ddfaa318c550f1f38dd09d610dcff827d1f2ccd4ddcafaa6c553cc',
            });
            console.log("receipt is ", receipt);
            console.log("verifyHeaderAndExecuteTx gas:", receipt.gasUsed);
          
        });

        it('verifyHeaderAndExecuteTx throws error on sync same block height header twice', async function () {
            await expectRevert(this.ECCM.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1), "the transaction has been executed!");
        });
    });

    describe('changeBookKeeper', function () {
        const rawHeader = '0x000000009b91561700000000f48a4057bef268cc3fdb034e69dc2e942907e08ac4a420d1b196b8c28ebf5bf2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a8be0a1605a63a31704aec4eb4f1023f1ecc2934bd86f119ab77526f9477af9a57e1a5f508e0000410782720ab189fffd84057b226c6561646572223a332c227672665f76616c7565223a22424f4f336f58796b32524970655651593338547133714a423832737a4a68366e4f6f724a55702f4a4d582b474c707a347a497347394c4a6c34784a6f34657448674f56357169364d484b6674714f69724f755a495a69593d222c227672665f70726f6f66223a22635953525746506f69394748414247526255646836612b35506f4f317776354a557a53417457786845637071757430536a595873344c7453353574534a74334174493059616d4c67524a797a524f68564756626d34673d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a33363433322c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a342c226e223a382c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d2c7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a352c226964223a2231323035303234363864643138393965643264316363326238323938383261313635613065636236613734356166306337326562323938326436366234333131623465663733227d2c7b22696e646578223a382c226964223a2231323035303339333432313434356239343231626434636339306437626338386339333031353538303437613736623230633539653763353131656537643232393938326231227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a372c226964223a2231323035303331653037373966356335636362323631323335326665346132303066393964336537373538653730626135336636303763353966663232613330663637386666227d2c7b22696e646578223a362c226964223a2231323035303265623162616162363032633538393932383235363163646161613761616262636464306363666362633365373937393361633234616366393037373866333561227d5d2c22706f735f7461626c65223a5b322c382c352c352c382c372c312c342c352c362c352c342c372c372c332c332c342c362c312c322c342c382c352c342c372c342c362c362c322c322c312c312c382c382c362c362c362c372c382c372c342c382c352c312c332c332c382c352c332c362c332c362c372c352c362c322c332c312c322c362c352c322c312c342c322c312c382c342c382c332c382c372c372c352c312c372c342c342c312c352c322c352c362c312c322c382c332c332c312c332c312c342c312c372c382c362c382c322c352c312c342c352c332c322c322c322c382c332c332c332c362c372c342c372c342c322c372c352c362c375d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7df8fc7a1f6a856313c591a3a747f4eca7218a820b';
        const pubKeyList = '0x1205041e0779f5c5ccb2612352fe4a200f99d3e7758e70ba53f607c59ff22a30f678ff757519efff911efc7ed326890a2752b9456cc0054f9b63215f1d616e574d6197120504468dd1899ed2d1cc2b829882a165a0ecb6a745af0c72eb2982d66b4311b4ef73cff28a6492b076445337d8037c6c7be4d3ec9c4dbe8d7dc65d458181de7b5250120504482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f39ef0a95ee60ad9213eb0be343b703dd32b12db32f098350cf3f4fc3bad6db23ce120504679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de8515988754f348293c65055f0f1a9a5e895e4e7269739e243a661fff801941352c387121205048172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d658df044eb93bbe698eff62156fc14d6d07b7aebfbc1a98ec4180b4346e67cc3fb01205048b8af6210ecfdcbcab22552ef8d8cf41c6f86f9cf9ab53d865741cfdb833f06b72fcc7e7d8b9e738b565edf42d8769fd161178432eadb2e446dd0a8785ba088f12050493421445b9421bd4cc90d7bc88c9301558047a76b20c59e7c511ee7d229982b142bbf593006e8099ad4a2e3a2a9067ce46b7d54bab4b8996e7abc3fcd8bf0a5f120504eb1baab602c5899282561cdaaa7aabbcdd0ccfcbc3e79793ac24acf90778f35a059fca7f73aeb60666178db8f704b58452b7a0b86219402c0770fcb52ac9828c'
        const sigList = '0x7d588d79ac9f0931c69150de6bfe5289f0147893781bffbcc32b5e07bd687d1048dda039ffc1e87de2e98610dc876e97411d604948473904b12b64bed8880bcc00ea8be33bb197c82690987e22e970221de11dfa019f470d784ef211edb6c9a3fd75bf74904adea08ed37a635c4dc58ccc21369afc1abcab4696a42be1097468a400289be668444122fd1d48c62781ded43e6fbda9bdd587dc7ee1bd326390d70e3f0e174fbd4854ed96c697dcee93feabbf7cdf290ebee93d4f5156d75d62b80ba301e79df9e679af49c403bbf05a24af2307adc96b641f4501fdb96e6704d27b2a87278e15bfee5909d4fa62dd45907cba23f833b3e96378d140d56722d1f59821e4006d8349493021e2cd6af96524357867b6be9d24ef33aaf66c430d5f91c33253304380ee17c6839fed964e7ba4910dd26533125b548cff6450140b10caec1b08fe01'
        const rawHeaderHeight = new web3.utils.BN('36432');
        it('changeBookKeeper correctly', async function () {
            const {receipt, logs} = await this.ECCM.changeBookKeeper(rawHeader, pubKeyList, sigList);
            expectEvent.inLogs(logs, 'ChangeBookKeeperEvent', {
                height: rawHeaderHeight,
                rawHeader: rawHeader,
            });
            console.log("receipt is ", receipt);
            console.log("changeBookKeeper gas:", receipt.gasUsed);
        });

        it('changeBookKeeper throws error on sync same block height header twice', async function () {
            await expectRevert(this.ECCM.changeBookKeeper(rawHeader, pubKeyList, sigList), "The height of header is lower than current epoch start height!");
        });
    });
    describe('verifyHeaderAndExecuteTx', function () {
        const proofx = '0xd020e91d858cba58b3dff91bf4b3adcacabf899e106ed6ad86a16a4a29e7817e307c080000000000000020b697330bd7a5850235f97d1bcd1c37739f4bc79a4f8e635dcb46ba45bc600ef4012f14f71b55ef55cedc91fd007f7a9ba386ec978f3aa80200000000000000144ddcf539d13e92d4151b7f5e607d4a09f725c47d06756e6c6f636b4a14000000000000000000000000000000000000000014344cfc3b8635f72f14200aaf2168d9f75df86fd36226100000000000000000000000000000000000000000000000000000000000';
        const blockHeaderx1 = '0x000000009b91561700000000285c4b50cb092422c306eee00b18730bd1e05f0c144bc04d0adf1f44e0aef6c70000000000000000000000000000000000000000000000000000000000000000829ba7727b3bb7d42eff74342bafb37362b4898169750e8b2b8af2267c863ebf6fb8849a086fbed1ccd873b63642cce60ac54875cc3c1f054c1866e0bca5136dc90a185f5e4100007de0abdc2a5b63d5fd0c017b226c6561646572223a312c227672665f76616c7565223a224249703243555764736c424c6b34754979584174417949682f74685a6b5072445539566279697358754c574d6e634a775a49515161434f4b74724474793437454d3541554e4a7542523133546b6857616e56422b4b7a493d222c227672665f70726f6f66223a224a3830534c2b6c62433537306f64426374486f477a45504631516d506f7a4f4332323132553563796b4949346a6b77374d2f74746f317537386e4634347256433443676d344f786f71667943656b3568487132576a413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofx = '0x20c73c8b3c730086cfae83d735d2c405d6f5a00c3f1ff21ce91d223038d3c1ab4d000213149490394c2a8701af2dba1a303df05148a14092f6e59febca31eee4da660079807fe94ecb6f6d1b0b65be5f45159925a905bab8040af476c372ea0583dbba00b41a753c36f64bbe6d6fcd6c2ba40dc09c4c25b6b877bd363696fe1f62cbf6f700059195b0df4add4239eaef270bc187217dc872d11723d4fce02a3c2510461e5900f3c3d66c4611791ff1ebe8a2ef43f1cbf40876b637522c60a81f511445f8dc17011f86c65842afb760457d5ce8ad38821d2110331a7bbae87fe131a5e610f3a146004add0a7a5c74a56ce64a3555b4a73f367c414c80ecc15672dd86f7bff8bf65bc011daedaae87fc34d28ec3116dc04386c7c650f5db9e3a9a853c6e518821069bda001c6cf42ace3bf6b1a7e60ae29dc10aad67cdf672cdb083c601ee3996576cc2e401a1a8ab20062ebdcfa7a6e8f0c6c8b3de823920abd351eedc33d043de1c1449880171c734d6d77806f9475b69c8426bc5c09ce54c0b4ccb13df4315c62899e9926201f459d25426b21e5f2f6bdabf5e6a79f36002114b1ecc5cfa30a18cf3e4baf98d01ad42157822143a7be209b907901a31863d1b35ad9118c4c45d476e405872fb66017badaf21d00ca7e2a73c64dd7738ddcb6a881dcfb88ef0c171e33bfec529fe0a00e0a6008bab76556dbf47269adc41d6820c6a55982e9362257bfdf02a79ff5b8d01061cd147d032d11b1b7b6b5edc389f56d33f939e51be3c7949b357aac4e120df'
        const curRawHeader = '0x000000009b91561700000000f2e3823838bcdfafe08c6e9ff2cd1f86ae65dfc1052d15c9441aa6c07097015f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051d45928d93800ffebc80373df7dbe735a2e9c5998b883e69494921fedbbe858057f1a5f5a8e0000216854be71737efbfd10017b226c6561646572223a362c227672665f76616c7565223a224244592f6c4875783448587341376f394962357877634a4d39727466656a454c786d6637766a48583574507a64724d356a47304a305265756d4338632f6e64725131306b4751622f50537a3255667a6267723430666a413d222c227672665f70726f6f66223a2242437877375a6d49446243476a3839576e715744564f6b714f7239645574344f4f2f777176366d4c3165656377474d542b3078664476544642614f3951534451437879725551344c316835392b3130486671386176673d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a33363433322c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const signaturesx1 = '0x6d905d095fc1b47eb30b8f176c94b01b64502790f3c20db2a5b7e555791bdbf8458a24c73c8f690ad8481e3754c3297991f9f4148d03316e2e5a6c6af9e7bbc900a81911a6eb529979ee021124c242a828657865fc7a899ab55fb7d2a1623341a67ae83c90a40bec8bf54fa3c5caad445062568d3c4c4099e84ad6c774e70d7d7d000b5d0a2ebc3685a6deeb96cfabf71e4a9d05606a5918e4765be6cc4cad38c3954e248d97b2fa378b954f323335c93298913c61048cf0b396467df1c6b6bbba4d01cd68657ad3c6d5a979093ff1345eefb269e86498b519418fa0e5e756ce01a9b939d46b405d2a167883bda0a40023cce39659890c97a59e3f772b6fc3c2e03221004d425ad3bfef2de8b1d523cbfd754d4ea2c8e8fa5f6904b0389f4e5d62039083454e2a24da6e1c90334fd760eaa1921bdac10158758f682cb401e1df16ee0ec801b8e8eb23200a1571c6ad516528ce3f1280506eed9f1e380b9a5e770f1e89d8414182c7b83dc8f230d288c4745d0a8102cfc015d422af77d139bc606054363ecf0138fc63be97c354539b517bd8abd97d86fa3484894663aa7dcf578cfad7368df577206e28daf800cba179314f34f1a6dec569ff12e15c22b598028cce64bfa54601'
        it('verifyHeaderAndExecuteTx correctly', async function () {
            const {logs} = await this.ECCM.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('8'),
                toContract: '0x4ddcf539d13e92d4151b7f5e607d4a09f725c47d',
                crossChainTxHash:'0xe91d858cba58b3dff91bf4b3adcacabf899e106ed6ad86a16a4a29e7817e307c',
                fromChainTxHash:'0xb697330bd7a5850235f97d1bcd1c37739f4bc79a4f8e635dcb46ba45bc600ef4',
            });
        });

        it('verifyHeaderAndExecuteTx throws error on sync same block height header twice', async function () {
            await expectRevert(this.ECCM.verifyHeaderAndExecuteTx(proofx, blockHeaderx1, headerProofx, curRawHeader, signaturesx1), "the transaction has been executed!");
        });
    });
    describe('Here, we demonstrate the steps to upgrade EthCrossChainManagerContract,', async function () {
        it('first, owner of this.ECCMP invoke this.ECCMP.pauseEthCrossChainManager()', async function () {
            const {logs} = await this.ECCMP.pauseEthCrossChainManager({from:accounts[0]});
            expectEvent.inLogs(logs, 'Paused', {
                account:accounts[0],
            });
            expectEvent.inLogs(logs, 'Paused', {
                account:this.ECCMP.address,
            });
            expectEvent.inLogs(logs, 'Paused', {
                account:this.ECCM.address,
            });
            let pauseStatusECCMP = await this.ECCMP.paused();
            assert.equal(pauseStatusECCMP, true);
            let pauseStatusECCM = await this.ECCM.paused();
            assert.equal(pauseStatusECCM, true);
            let pauseStatusECCD = await this.ECCD.paused();
            assert.equal(pauseStatusECCD, true);
        });
        it('second, we deploy the new version of EthCrossChainManager contract which we have done in before with hash = this.ECCM1.address', async function () {
            console.log('new version of EthCrossChainManager contract  address we deployed previously: \n', this.ECCM1.address);
        });
        it('third, the deployer invoke this.ECCM1.transferOwnership(this.ECCMP.address)', async function () {
            let owner = await this.ECCM1.owner();
            assert.equal(owner, accounts[0]);
            const {logs} = await this.ECCM1.transferOwnership(this.ECCMP.address, { from: accounts[0] });
            expectEvent.inLogs(logs, 'OwnershipTransferred', {
                previousOwner:accounts[0],
                newOwner:this.ECCMP.address,
            });
            owner = await this.ECCM.owner();
            assert.equal(owner, this.ECCMP.address);
        });
        it('forth, the owner of this.ECCMP invoke this.ECCMP.upgradeEthCrossChainManager(this.ECCM1.address)', async function () {
            let ownerOfECCD = await this.ECCD.owner();
            let ownerOfECCM = await this.ECCM.owner();
            let ownerOfECCMP = await this.ECCMP.owner();
            assert.equal(ownerOfECCD, this.ECCM.address);
            assert.equal(ownerOfECCM, this.ECCMP.address);
            assert.equal(ownerOfECCMP, accounts[0]);
            await this.ECCMP.upgradeEthCrossChainManager(this.ECCM1.address, { from: accounts[0] });
            let newOwnerOfECCM1 = await this.ECCM1.owner();
            assert.equal(newOwnerOfECCM1, this.ECCMP.address);
        });
        it('fifth, the owner of this.ECCMP invoke this.ECCMP.unpauseEthCrossChainManager()', async function () {
            await this.ECCMP.unpauseEthCrossChainManager({ from: accounts[0] });
            const newEthCrossChainManagerAddr = await this.ECCMP.getEthCrossChainManager.call();
            assert.equal(newEthCrossChainManagerAddr, this.ECCM1.address);
            let pauseStatusECCMP = await this.ECCMP.paused();
            assert.equal(pauseStatusECCMP, false);
            let pauseStatusECCM = await this.ECCM.paused();
            assert.equal(pauseStatusECCM, true);
            let pauseStatusECCD = await this.ECCD.paused();
            assert.equal(pauseStatusECCD, false);
            let pauseStatusECCM1 = await this.ECCM1.paused();
            assert.equal(pauseStatusECCM1, false);
        });
    });

    describe('Here, we try to use old method in the old EthCrossChainManager contract to process last epoch tx, should revert due to status paused', async function () {
        const proofy = '0xd0208a184af59286e0551fdfd485659957ace24bb7861777778886415ef1a0952c6908000000000000002015d2710ed6168a4042a9f3e12c3398e3e57fb47c95f5f7346480d0584f658c3c013014f71b55ef55cedc91fd007f7a9ba386ec978f3aa80200000000000000146aba9e15019537ac636932a4224ad99099116af006756e6c6f636b4a14000000000000000000000000000000000000000014344cfc3b8635f72f14200aaf2168d9f75df86fd323ee350000000000000000000000000000000000000000000000000000000000';
        const blockHeadery1 = '0x000000009b91561700000000c257d1ec56f09dda12a556f32a0d5518af470a5feecd35e984b18d347da47d480000000000000000000000000000000000000000000000000000000000000000a139bb8b9a0b35e76595c7a9c7ca01d9c93880298596c69c450cafe05aacceacc837b91e5d04ea6087fc337713c6ab67148e0d7c7c156fafaf3aea2ff43927a3f134195fe34f0000c6fec9145c223bc1fd0c017b226c6561646572223a312c227672665f76616c7565223a22424871556f7444456b56566e6b5070374542656f4b45384d514b4e4d72457a5a37316943687149494272554d3754765270532f634a4f2b393959725a7a3238494e424b6c44764e5969394945364f7079783850394942453d222c227672665f70726f6f66223a224c594931577864616236434b37414b2f757a655854716246576d6f5a4f756264776f7036656a374267796a4d4470732f64674f797961634e73464630536c627a756173546e416648656c68366b574d4b7561415464413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofy = '0x20b869456987b33d8e8f132b9ed6a6527444064ffd1446a2b3e03759f00c55b55c019f9f5b35cb27c7c1c0edb10422cc60138c82b3a280349a198b9bc0488994d25501d56483ff3541ecdee8f2e035ad1bd6761c1563d10001e092d4969ceb80093ad900f0fdb68e60bc72aad2de1fde5c72cad8e13b817c4079306c7bafbbcccb6214b801b45e220b6c7fb4133efefbfe1060d10036af8fa0abd9042667b32e5d295f5275014e020ea299a2bc23809e0db9f184462389989005d204ec7645026081d1ee13f7007e0e81a6f88fa7a79a16f1bc0f1681e0e11a9246e4599b6a7345aa9af5f147a200d28d4b380fe35bb86f64f7d7caed40c1ceed959577f2ff114f995d1a171de07800d0f31c1cc0d1ab54b67d8d1f79b1f855092f2e599b9aba9825b2393c199b839c005406b1a3308d3e64b052c7feeba56da04d9c84bfaaaf73a00a24bfa4df70d1c2006798338128b154b681bd803cd240685b357bf6e7e34a7136c4a5435834bc21ce0023f43b40d8ac715c50578cbaef5841d1a69a6f3de4eabcb81cfc14e2a137809400bb91772ec2a977c9f90def0756ec66a660241aa69d304bb6216a9684a79628a901ad42157822143a7be209b907901a31863d1b35ad9118c4c45d476e405872fb66017badaf21d00ca7e2a73c64dd7738ddcb6a881dcfb88ef0c171e33bfec529fe0a00e0a6008bab76556dbf47269adc41d6820c6a55982e9362257bfdf02a79ff5b8d01fc4e7f387cafe5535ddc92aaa15feb7e13190f9f11e6ecc1eec194afb87507d1'
        const curRawHeader = '0x000000009b91561700000000e37f8641960eb66c296d844f218a8ef3e9647f0045eb6bc74271a216b519185000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f29bae4752df05801218b94eb3294c78706aba82bb8b925ab533237b77f54945f7441e5f409c0000a13522121871fd50fd10017b226c6561646572223a362c227672665f76616c7565223a2242455555766655616b63466450376e36354362674166583134546732486232412f707434713547746f4a554b773877594743684233736a504e576e325a446e4949546d393062466c46436937586167464e59715671456f3d222c227672665f70726f6f66223a22626b593836525348357864536567425151586b6e576d665838582b374c516166334b416530465644655672684a4b2b744a617832693335633736794e4242797639616238734142525156306f454f42635837794839513d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a33363433322c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const signaturesy1 = '0x54bca9e64dd75bb07b0c4ae901b6322b19c9b23fa0a963c796f0684bf69911f66ed2e2b12cdb4bc4c275e670916478748e1b00c276975497baab64b09cbac33201708a22caf9049ee9f7cc19d2e0f2b166ac77f1db66c8472a0b299cde520887bc7b652990118e8cee6a39b2460f061807e9bbf986776d0123ef6b92ac53b097ea01ff956defca5f9b9841c431b1107b02ac19c5576ed3339de09952992290f0ae6e4d2e16f308ce73af45d0ba3fbffd3f868703bde4ff6393c46ba0d78070cce0a7013ca03404ebf6a08c8d3d7769bb7ccad1fdcfd4422906c8fc5464aa0c62975ee21d532c38a565da4dd100c68e18416646ec6d32497d6114fc08b98675bff8a76c013a1e4c7e36ab34ca5c64645493fd3a634874692c4a29cf0a72b764dbe8710f07616d810c16746c8aaa41bc9318e837a5545230edebce5b32bfb18d84bd8799a301f9b77a1ea5199ca55112e4d2c865ac530019f50a66daba9968880cca92187bd0775f7ac3230bdcce3a12d197f34c95251ca5ac1dd5fdb45e5f78288a00df283d01'
        it('in old EthCrossChainManager contract, verifyHeaderAndExecuteTx throws error on since contract status paused', async function () {
            await expectRevert(this.ECCM.verifyHeaderAndExecuteTx(proofy, blockHeadery1, headerProofy, curRawHeader, signaturesy1), "Pausable: paused");
        });
    });

    describe('Here, we try to use old method in the new EthCrossChainManager contract to process last epoch tx,', async function () {
        const genesisHeader = '0x000000009b9156170000000000000000000000000000000000000000000000000000000000000000000000006de0a8f7ee3fb67d8e04ac9547f3615e59adc6e0a2309c90080a272dc1fa1fd90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8365b000000001dac2b7c00000000fd1a057b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a372c2263223a322c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303238313732393138353430623262353132656165313837326132613265336132386439383963363064393564616238383239616461376437646437303664363538227d2c7b22696e646578223a322c226964223a2231323035303338623861663632313065636664636263616232323535326566386438636634316336663836663963663961623533643836353734316366646238333366303662227d2c7b22696e646578223a332c226964223a2231323035303234383261636236353634623139623930363533663665396338303632393265386161383366373865376139333832613234613665666534316330633036663339227d2c7b22696e646578223a342c226964223a2231323035303236373939333061343261616633633639373938636138613366313265313334633031393430353831386437383364313137343865303339646538353135393838227d2c7b22696e646578223a352c226964223a2231323035303234363864643138393965643264316363326238323938383261313635613065636236613734356166306337326562323938326436366234333131623465663733227d2c7b22696e646578223a362c226964223a2231323035303265623162616162363032633538393932383235363163646161613761616262636464306363666362633365373937393361633234616366393037373866333561227d2c7b22696e646578223a372c226964223a2231323035303331653037373966356335636362323631323335326665346132303066393964336537373538653730626135336636303763353966663232613330663637386666227d5d2c22706f735f7461626c65223a5b362c342c332c352c362c312c322c352c342c372c342c322c332c332c372c362c352c342c362c352c312c342c332c312c322c352c322c322c362c312c342c352c342c372c322c332c342c312c352c372c342c312c322c322c352c362c342c342c322c372c332c362c362c352c312c372c332c312c362c312c332c332c322c342c342c312c352c362c352c312c322c362c372c352c362c332c342c372c372c332c322c372c312c352c362c352c322c332c362c322c362c312c372c372c372c312c372c342c332c332c332c322c312c372c355d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d9fe171f3fe643eb1c188400b828ba184816fc9ac0000'
        const genesisPubKey = '0x1205041e0779f5c5ccb2612352fe4a200f99d3e7758e70ba53f607c59ff22a30f678ff757519efff911efc7ed326890a2752b9456cc0054f9b63215f1d616e574d6197120504468dd1899ed2d1cc2b829882a165a0ecb6a745af0c72eb2982d66b4311b4ef73cff28a6492b076445337d8037c6c7be4d3ec9c4dbe8d7dc65d458181de7b5250120504482acb6564b19b90653f6e9c806292e8aa83f78e7a9382a24a6efe41c0c06f39ef0a95ee60ad9213eb0be343b703dd32b12db32f098350cf3f4fc3bad6db23ce120504679930a42aaf3c69798ca8a3f12e134c019405818d783d11748e039de8515988754f348293c65055f0f1a9a5e895e4e7269739e243a661fff801941352c387121205048172918540b2b512eae1872a2a2e3a28d989c60d95dab8829ada7d7dd706d658df044eb93bbe698eff62156fc14d6d07b7aebfbc1a98ec4180b4346e67cc3fb01205048b8af6210ecfdcbcab22552ef8d8cf41c6f86f9cf9ab53d865741cfdb833f06b72fcc7e7d8b9e738b565edf42d8769fd161178432eadb2e446dd0a8785ba088f120504eb1baab602c5899282561cdaaa7aabbcdd0ccfcbc3e79793ac24acf90778f35a059fca7f73aeb60666178db8f704b58452b7a0b86219402c0770fcb52ac9828c'
        
        it('InitGenesisBlock should revert', async function () {
            await expectRevert(this.ECCM1.initGenesisBlock(genesisHeader, genesisPubKey), "EthCrossChainData contract has already been initialized!");
        });
        const proofy = '0xd0208a184af59286e0551fdfd485659957ace24bb7861777778886415ef1a0952c6908000000000000002015d2710ed6168a4042a9f3e12c3398e3e57fb47c95f5f7346480d0584f658c3c013014f71b55ef55cedc91fd007f7a9ba386ec978f3aa80200000000000000146aba9e15019537ac636932a4224ad99099116af006756e6c6f636b4a14000000000000000000000000000000000000000014344cfc3b8635f72f14200aaf2168d9f75df86fd323ee350000000000000000000000000000000000000000000000000000000000';
        const blockHeadery1 = '0x000000009b91561700000000c257d1ec56f09dda12a556f32a0d5518af470a5feecd35e984b18d347da47d480000000000000000000000000000000000000000000000000000000000000000a139bb8b9a0b35e76595c7a9c7ca01d9c93880298596c69c450cafe05aacceacc837b91e5d04ea6087fc337713c6ab67148e0d7c7c156fafaf3aea2ff43927a3f134195fe34f0000c6fec9145c223bc1fd0c017b226c6561646572223a312c227672665f76616c7565223a22424871556f7444456b56566e6b5070374542656f4b45384d514b4e4d72457a5a37316943687149494272554d3754765270532f634a4f2b393959725a7a3238494e424b6c44764e5969394945364f7079783850394942453d222c227672665f70726f6f66223a224c594931577864616236434b37414b2f757a655854716246576d6f5a4f756264776f7036656a374267796a4d4470732f64674f797961634e73464630536c627a756173546e416648656c68366b574d4b7561415464413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a302c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofy = '0x20b869456987b33d8e8f132b9ed6a6527444064ffd1446a2b3e03759f00c55b55c019f9f5b35cb27c7c1c0edb10422cc60138c82b3a280349a198b9bc0488994d25501d56483ff3541ecdee8f2e035ad1bd6761c1563d10001e092d4969ceb80093ad900f0fdb68e60bc72aad2de1fde5c72cad8e13b817c4079306c7bafbbcccb6214b801b45e220b6c7fb4133efefbfe1060d10036af8fa0abd9042667b32e5d295f5275014e020ea299a2bc23809e0db9f184462389989005d204ec7645026081d1ee13f7007e0e81a6f88fa7a79a16f1bc0f1681e0e11a9246e4599b6a7345aa9af5f147a200d28d4b380fe35bb86f64f7d7caed40c1ceed959577f2ff114f995d1a171de07800d0f31c1cc0d1ab54b67d8d1f79b1f855092f2e599b9aba9825b2393c199b839c005406b1a3308d3e64b052c7feeba56da04d9c84bfaaaf73a00a24bfa4df70d1c2006798338128b154b681bd803cd240685b357bf6e7e34a7136c4a5435834bc21ce0023f43b40d8ac715c50578cbaef5841d1a69a6f3de4eabcb81cfc14e2a137809400bb91772ec2a977c9f90def0756ec66a660241aa69d304bb6216a9684a79628a901ad42157822143a7be209b907901a31863d1b35ad9118c4c45d476e405872fb66017badaf21d00ca7e2a73c64dd7738ddcb6a881dcfb88ef0c171e33bfec529fe0a00e0a6008bab76556dbf47269adc41d6820c6a55982e9362257bfdf02a79ff5b8d01fc4e7f387cafe5535ddc92aaa15feb7e13190f9f11e6ecc1eec194afb87507d1'
        const curRawHeader = '0x000000009b91561700000000e37f8641960eb66c296d844f218a8ef3e9647f0045eb6bc74271a216b519185000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f29bae4752df05801218b94eb3294c78706aba82bb8b925ab533237b77f54945f7441e5f409c0000a13522121871fd50fd10017b226c6561646572223a362c227672665f76616c7565223a2242455555766655616b63466450376e36354362674166583134546732486232412f707434713547746f4a554b773877594743684233736a504e576e325a446e4949546d393062466c46436937586167464e59715671456f3d222c227672665f70726f6f66223a22626b593836525348357864536567425151586b6e576d665838582b374c516166334b416530465644655672684a4b2b744a617832693335633736794e4242797639616238734142525156306f454f42635837794839513d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a33363433322c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const signaturesy1 = '0x54bca9e64dd75bb07b0c4ae901b6322b19c9b23fa0a963c796f0684bf69911f66ed2e2b12cdb4bc4c275e670916478748e1b00c276975497baab64b09cbac33201708a22caf9049ee9f7cc19d2e0f2b166ac77f1db66c8472a0b299cde520887bc7b652990118e8cee6a39b2460f061807e9bbf986776d0123ef6b92ac53b097ea01ff956defca5f9b9841c431b1107b02ac19c5576ed3339de09952992290f0ae6e4d2e16f308ce73af45d0ba3fbffd3f868703bde4ff6393c46ba0d78070cce0a7013ca03404ebf6a08c8d3d7769bb7ccad1fdcfd4422906c8fc5464aa0c62975ee21d532c38a565da4dd100c68e18416646ec6d32497d6114fc08b98675bff8a76c013a1e4c7e36ab34ca5c64645493fd3a634874692c4a29cf0a72b764dbe8710f07616d810c16746c8aaa41bc9318e837a5545230edebce5b32bfb18d84bd8799a301f9b77a1ea5199ca55112e4d2c865ac530019f50a66daba9968880cca92187bd0775f7ac3230bdcce3a12d197f34c95251ca5ac1dd5fdb45e5f78288a00df283d01'
       it('in new EthCrossChainManager contract, should verifyHeaderAndExecuteTx correctly', async function () {
            const {logs} = await this.ECCM1.verifyHeaderAndExecuteTx(proofy, blockHeadery1, headerProofy, curRawHeader, signaturesy1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('8'),
                toContract: '0x6aba9e15019537ac636932a4224ad99099116af0',
                crossChainTxHash:'0x8a184af59286e0551fdfd485659957ace24bb7861777778886415ef1a0952c69',
                fromChainTxHash:'0x15d2710ed6168a4042a9f3e12c3398e3e57fb47c95f5f7346480d0584f658c3c',
            });
        });
        it('in new EthCrossChainManager contract, verifyHeaderAndExecuteTx throws error on sync same block height header twice', async function () {
            await expectRevert(this.ECCM1.verifyHeaderAndExecuteTx(proofy, blockHeadery1, headerProofy, curRawHeader, signaturesy1), "the transaction has been executed!");
        });
    });
    describe('Here, we try to use new method in the new EthCrossChainManager contract,', async function () {
        const a = new web3.utils.BN('123456789');
        const b = new web3.utils.BN('987654321');
        const expectResult = a.add(b);
        it('in new EthCrossChainManager contract, should addFunctionTest1 correctly', async function () {
            const res = await this.ECCM1.addFunctionTest1.call(a, b);
            assert.equal(expectResult.toNumber(), res.toNumber());
        });
    });
    describe('verifyHeaderAndExecuteTx for current epoch tx after upgrade contract', function () {
        const proofz = '0xd7206de23520db9f6978f8d1b0ba7369edcbea4ea62396605363ea7cb721f31885930300000000000000204a96009aa5364a71f39f3a9984215da1dac4bf4fd5c459af542f028685d85031081e0400000000000014b7041bc96b15da728fdfc1c47cbfc687b845adeb0200000000000000146aba9e15019537ac636932a4224ad99099116af006756e6c6f636b4a14283d389667f28d5fc7e3049a2bd7a40a2ae08f1514344cfc3b8635f72f14200aaf2168d9f75df86fd30f0000000000000000000000000000000000000000000000000000000000000000b6baca2408e3d037f744210446279438b7d7cef89cc1ab738f18e0ff007c7fb80063f78a02a450496c46279b75a2943fe31b8d2b81b61b030ab33c6bc079e473f900a6998c80cfc576a19fbc313501003bfc0d014db3511ae7e6ee27f446fcaed9d600e20a98f755c55e7f0c29fae8cb81539a2158e1ba15a1e3523439f639eda613a7';
        const blockHeaderz1 = '0x000000009b91561700000000a38ff31f1a18ccd3f0da6293f2995d841fb54fffb6e5c5b2c4a90e0958e07f241fb0cc7b597ddb67f70b457e7ae8b827c692f594bfe130f5c3e3a04914a76127fc2e9b603bb187f6f0006312db8d248c1225c76a0672b9caee589408238e217ee3a10983975e8ddedd7336fc6c4fdee4972213d7d670f85bbd0898e6cf29260c25c01a5faa8f0000c9c576cb2c4a58c4fd10017b226c6561646572223a372c227672665f76616c7565223a224249766435556654576d6761335868594a54487a66425178503164767972316a6e41324f636d736b2b2f32706f4c6d6758445530316b4c61324d3553646366746c482f6657674652613431726c754f7879337462386c383d222c227672665f70726f6f66223a22366e63657331786952666c4757775841586642773348426e4263767477584977684a4669564b664335753030463844413233683858796248367856596f63334a76676955765a32465869572b3162774b554935656d513d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a33363433322c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const headerProofz = '0x'
        const curRawHeader = '0x000000009b91561700000000a38ff31f1a18ccd3f0da6293f2995d841fb54fffb6e5c5b2c4a90e0958e07f241fb0cc7b597ddb67f70b457e7ae8b827c692f594bfe130f5c3e3a04914a76127fc2e9b603bb187f6f0006312db8d248c1225c76a0672b9caee589408238e217ee3a10983975e8ddedd7336fc6c4fdee4972213d7d670f85bbd0898e6cf29260c25c01a5faa8f0000c9c576cb2c4a58c4fd10017b226c6561646572223a372c227672665f76616c7565223a224249766435556654576d6761335868594a54487a66425178503164767972316a6e41324f636d736b2b2f32706f4c6d6758445530316b4c61324d3553646366746c482f6657674652613431726c754f7879337462386c383d222c227672665f70726f6f66223a22366e63657331786952666c4757775841586642773348426e4263767477584977684a4669564b664335753030463844413233683858796248367856596f63334a76676955765a32465869572b3162774b554935656d513d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a33363433322c226e65775f636861696e5f636f6e666967223a6e756c6c7d0000000000000000000000000000000000000000'
        const signaturesz1 = '0x44defe311767bed6f2116dd15016ebc9441787d4cca2da0b514b8ab78dd6cdff0f07b03badc144e00db05459cecc9131c8841ef65f18b8c063b460265ef05e7d0090ccf8b906d4d5fc34e8f01691449d7c02a0763018e9ccf45817d1a880bccbe57739d9b34e52eec1cae8cfda4fee1d99fca578560b1d111c498e9e20f13c4d1a003a2413b4de268e1cb9d9dc61634ff7c8239935872ad891184bf361f30fe54bb04c2b8990ecc5f7feea4a2606619ff2db0d281caea64ca65d7d3b7f950cc6454a01ef1eed36f7e6cae364fc0cb996ba246988d631fdb2d9cb77d871f0a436ac4d9b337c84b7fb690c535d11a1dede8582a5441501483b8334ad529c02e63eb61c5900975991429c2b809ba8d914e985637bbfa65b4a8f626347d3f1b9f385e33e827f2b6e22f426c96d784d207041c62b77280a0d903f0153fd8bead3c8615680cad301c8b89c176a369f814078a39d8535f47758de53b504c1009682dd4118dfeae3f2074870d5d6bebd0b718a58773d4189d0e2463a1fc98efbaa992bf12dd240f9dc0115cbd70a63cf78faebc088da7ca43f07efed0800a20610b323a5772acb6c212d33799a2345b305baa2a3adb3ae65151f93be170677529fea4334a614d6b0ce5c00'
        it('verifyHeaderAndExecuteTx correctly after upgrade contract', async function () {
            const {logs} = await this.ECCM1.verifyHeaderAndExecuteTx(proofz, blockHeaderz1, headerProofz, curRawHeader, signaturesz1);
            expectEvent.inLogs(logs, 'VerifyHeaderAndExecuteTxEvent', {
                fromChainID: new web3.utils.BN('3'),
                toContract: '0x6aba9e15019537ac636932a4224ad99099116af0',
                crossChainTxHash:'0x6de23520db9f6978f8d1b0ba7369edcbea4ea62396605363ea7cb721f3188593',
                fromChainTxHash:'0x4a96009aa5364a71f39f3a9984215da1dac4bf4fd5c459af542f028685d85031',
            });
        });

        it('verifyHeaderAndExecuteTx throws error on sync same block height header twice after upgrade contract', async function () {
            await expectRevert(this.ECCM1.verifyHeaderAndExecuteTx(proofz, blockHeaderz1, headerProofz, curRawHeader, signaturesz1), "the transaction has been executed!");
        });
    });
});